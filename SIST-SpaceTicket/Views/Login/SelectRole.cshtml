
@{
    ViewBag.Title = "SelectRole";
    Layout = null;
}

@model SIST_SpaceTicket.ViewModel.ViewModelRoles

@*icono de Space ticket*@
<link href="~/SpaceTicket_LogoIcon.ico" rel="shortcut icon" type="image/x-icon" />

<link href="~/Content/index.styles.css" rel="stylesheet" />
<style>
    * {
        padding: 0;
        margin: 0;
        box-sizing: border-box;
    }

    .main {
        min-height: 100vh;
        background: #000;
        padding-top: 5rem;
        font-family: 'poppins', sans-serif;
    }

    .role-menu {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        background-color: transparent;
    }

        .role-menu .menu-item {
            text-align: center;
            background-color: #F91233;
            margin: 2rem auto;
            width: 75%;
            border-radius: .5rem;
            font-weight: bolder;
            font-size: 1.2rem;
        }


    .role-link {
        text-decoration: none !important;
        color: #FFF !important;
        padding: 1.5rem !important;
        display: block !important;
        transition: .5s;
    }

        .role-link:hover {
            transform: scale(1.1);
        }
</style>
<main class="main">
    <div class="role-menu">
        <h1 style="margin-bottom: 1rem;">¿Quién ingresará?</h1>
        @foreach (var item in Model.Roles)
        {
            <div class="menu-item">
                @Html.ActionLink(item.Substring(0, 1) + item.Substring(1, item.Length - 1).ToLower(),
           "LogWithRole", "Login", new { role = item, isSwitching = (bool)Session["isSwitching"]},
           new { @class = "role-link" })
            </div>
        }
    </div>
</main>
<script>
    const contStar = 300;
    const space = document.getElementsByClassName('main')[0];
    function createSpace() {
        let stars = '';
        for (let index = 0; index < contStar; index++) {
            let star = document.createElement('span');
            star.classList.add('star');
            let top = parseInt(Math.random() * space.offsetHeight);
            let left = parseInt(Math.random() * space.offsetWidth);
            let padding = parseInt(Math.random() * 3);
            star.style.top = top + 'px';
            star.style.left = left + 'px';
            star.style.padding = padding + 'px';
            let random = parseInt(Math.random() * 10);
            if (random % 2 == 0) {
                star.classList.add('starAnimated')
                let delay = (Math.random() * 4);
                star.style.animationDelay = delay + 's';
            }
            space.appendChild(star);
        }
    }
    window.onload = createSpace;
</script>
<script src="~/Scripts/scrollreveal.min.js"></script>
<script>
    const sr = ScrollReveal({
        origin: 'top',
        distance: '60px',
        duration: 2000,
        delay: 300,
    })

    sr.reveal('.menu-item', { interval: 100 });
</script>
